可交互性

应该以内容为核心，让用户界面成为内容的支撑。

确保你的应用始终是以内容为核心的另一个方法是保证清晰度。这里有几种方法可以让最重要的内容和功能清晰可见，

使用大量留白。留白可以使重要的内容和功能更加醒目、更易理解。留白还可以传达一种平静和安宁的心理感受，它可以使一个应用看起来更加聚焦和高效。

让颜色简化UI。使用一个主题色——比如Notes中用了黄色——高亮了重要区块的信息并巧妙地用样式暗示可交互性。同时，也让应用有了一致的视觉主题。内置的应用使用了同系列的系统颜色，这样一来，无论在深色或浅色背景上看起来都很干净，纯粹。



UIKit framework 组件

导航：
应该让用户时刻清楚自己当前在应用中所处的位置，及如何前往目的页面。无论使用哪种适合你的应用结构的导航，最重要的是用户访问内容的路径要有逻辑、可预期和易于追溯。


一般来说，最好能给用户提供到达每一屏的唯一路径。如果某屏内容用户需要在不同场景下查看，可以考虑使用临时视图，例如模态视图、动作菜单或警告框。想要了解更多，请查看Modal View、Action Sheet和Alert。

分层  

在有层级结构的应用中，用户在每个层级中都要选择一项，直到到达目的层级。如果要切换到另一个目的层级，用户必须回退一些层级，或者直接回到初始层级再次选择。系统设置和邮箱应用在这方面是很好示范，可以参考他们。
使用导航栏(Navigation Bar)帮助用户轻松访问分层内容。导航栏的标题可以显示用户当前所处的层级，而后退按钮可以回到上一层级。想要了解更多内容，请查看Navigation Bar.


扁平   内容或体验驱动
使用标签栏(Tab Bar)显示同类型的内容或功能。标签栏很适合于扁平信息结构，可以让用户在分类之间随意切换，而不用在意当前所处的位置。想要了解更多内容，请查看Tab Bar.

在扁平信息架构的应用中，用户可以从首页目录直接切换到另一个，因为所有的分类都可以从主屏直接访问。音乐和App Store是两个使用扁平结构的好例子。

控件

临时视图：短暂出现给予用户重要信息或提供更多的选择和功能。 弹出层 Snackbars 与 Toasts等



使用布局来沟通(Use Layout to Communicate)

布局包含的不仅仅是一个应用屏幕上的UI元素外观。你的布局，应该告诉用户什么是最重要的，他们的选择是什么，以及事物是如何关联起来的。

强调重要内容或功能，让用户容易集中注意在主要任务上。


使用不同的视觉化重量和平衡来告诉用户当前屏显元素的主次关系。大型控件吸引眼球，比小的控件更容易在出现时被注意到。而且大型控件也更容易被用户点击，


给每个互动的元素充足的空间，从而让用户容易操作这些内容和控件。常用的点按类控件的大小是44 x 44点(points)。


我们通常认为用户不会花超过一两分钟去评价一款新应用。当你可以最大程度地利用这段极短的时间，即时呈现对用户有帮助的内容时，你就能够激发新用户的兴趣并给所有用户一种极棒的体验。

不要在安装过程结束后告诉用户需要重启设备。重启需要花费时间，同时也会让人觉得你的应用不可靠且很难使用。


尽可能地，避免让用户做过多设置。而应该如此：

聚焦在80%目标用户的需求上。这样绝大部分用户就无需设置各种选项，因为你的应用已经默认处于他们想要的状态。如果有些功能仅有少部分用户想要，或者是大部分用户只需要使用一次，那就别管它了。
尽可能用其他方式获取更多的用户信息。如果你能得到用户在内置应用或硬件设置中提供的信息，直接从系统中获取，不要让用户再次输入。
如果你必须要求用户设置用户信息，在你的应用中直接提示用户输入。然后尽快保存这些设定(一般来说，保存到你的应用的设置模块中)。这样用户就无需强制跳出应用进入系统设置页面了。如果用户需要更改设置，他们可以在任何时候进入应用的设置模块进行修改。
尽可能让用户晚一点再登录。最理想的状态是，用户在无需登录的情况下就能尽量多地浏览内容并使用部分功能。例如，App Store会在用户确定进行购买商品时，才要求用户进行登录。对于那些强制用户登录后才能进行一切有用操作的应用，用户往往会直接放弃。
如果你的应用必须先登录后使用，那么你应该在登录页面有一些简短的文字，来描述为什么必须先登录，以及这样做会给用户带来什么好处。

谨慎使用新手引导(介绍应用的功能和如何进行操作)。在考虑新手引导之前，你应该努力地完善你的应用，尽可能使应用的功能直观和易于寻找。其实，好的应用不需要新手引导。


1.6 模态情境(Modal Contexts)
模态是一个承载某些连贯操作或内容的优缺点并存的模式。它可以给用户提供一种不脱离主任务的方式去完成一个任务或者获得信息，但是也会临时性的阻止用户对应用的其他部分进行交互操作。

仅在以下情境可以考虑使用模态：
必须引起用户关注的时候

一个独立的任务需要完成或者很明确需要被放弃，为了避免在模棱两可的状态下遗漏用户信息的时候
保证模态任务简单、简短和高度聚焦。你肯定不希望用户使用模态视图时像使用应用中的一个mini应用一样。如果子任务过于复杂，用户会在进入模态情境时忽略了主要任务。

始终提供明显、安全的退出模态任务的途径。确保用户在退出模态视图时可以预期操作的结果。

保证提醒对话框的内容都是必要且可操作的。提醒对话框会打断用户的体验并且要点击才会消失，所以要让用户感到提醒信息是有用的，打断是有价值的。


1.7.1 可交互元素吸引用户点击(Interactive Elements Invite Touch)

为了暗示交互性，设计时会使用很多线索，包括点击的反馈、颜色、位置、上下文、表意明确的图标和标签等。并不需要过于修饰元素来向用户展示可交互性。


一个关键的颜色可以给用户提供很强的视觉指引，尤其是没有冗余的其它颜色时。为了对比，使用蓝色来标记可交互的元素，同时能提供统一的、易识别的视觉风格。




































返回按钮使用多个线索指明其可交互并传达其功能:它出现在导航中，显示了一个指向后方的图标，使用了关键色，并且显示了上一级页面的标题。




















在内容区域，必要时可以给按钮添加边界或背景。位于栏(Bar)、动作列表(Action Sheet)和警告框(Alert)中的按钮可以不需要边界，因为用户知道在这种区域中大多数选项是可交互的。但是在内容区域，有必要使用边界或背景将按钮从其他内容中区分出来。例如，音乐，时钟，照片，App Store在一些特别的场景中使用这种按钮。

应用商店中使用有边界的按钮，将按钮和整个内容条区分开来，点击整条内容查看详细信息，点击按钮进行下载安装。




























1.7.4 输入信息的方式要简单(Inputting Information Should Be Easy)
不管用户是点击控件还是使用键盘，输入信息都会花费时间和精力。如果在发挥有用的效用前就让用户输入大量信息会减弱用户继续使用的欲望。

让用户更容易的进行选择。例如，使用选择器或者表格代替纯文本，因为大部分用户觉得从列表中进行选择要比打字容易的多。


